package com.perscholas.nov2019.philly.capstone.finalproject.controllers;

import com.perscholas.nov2019.philly.capstone.finalproject.models.Event;
import com.perscholas.nov2019.philly.capstone.finalproject.models.TicketBuyer;
import com.perscholas.nov2019.philly.capstone.finalproject.repositories.EventRepository;
import com.perscholas.nov2019.philly.capstone.finalproject.repositories.TicketBuyerRepository;
import com.perscholas.nov2019.philly.capstone.finalproject.services.EventService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import javax.servlet.http.HttpServletRequest;
import java.util.List;

@Controller
@RequestMapping(path="/") // This means URL's start with / (after Application path)
public class EventController {

    @Autowired // This means to get the bean called eventRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private EventRepository eventRepository;

    @Autowired // This means to get the bean called ticketBuyerRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TicketBuyerRepository ticketBuyerRepository;


    private EventService eventService = new EventService();

    //search for events

    /*************************************************************************************************************************************************************************************************/
    @GetMapping(path = "/")
    public String setUpForm(Model model, HttpServletRequest httpServletRequest) {
        model.addAttribute("event", new Event());
        try {
            TicketBuyerController.ticketBuyerId = ticketBuyerRepository.findBuyerId(httpServletRequest.getRemoteUser());
        }catch (Exception e){
            TicketBuyerController.ticketBuyerId = -1;
        }

        return "index";
    }

    @PostMapping(path = "/search_result")
    public String searchEvents(Event event, Model model) {

        List<Event> events = eventRepository.findEvents(event.getTitleofevent(), event.getPlaceofevent(), event.getDescription(), event.getStartdate(), event.getEnddate(), event.getLocaltimeofshow());

        model.addAttribute("events", events);

        return "search_result";
    }
    /******************************************************************************************************************************************************************************************************/

}
