package com.perscholas.nov2019.philly.capstone.finalproject.controllers;

import com.perscholas.nov2019.philly.capstone.finalproject.exceptions.UserThereException;
import com.perscholas.nov2019.philly.capstone.finalproject.models.Event;
import com.perscholas.nov2019.philly.capstone.finalproject.models.TicketBuyer;
import com.perscholas.nov2019.philly.capstone.finalproject.models.TicketSeller;
import com.perscholas.nov2019.philly.capstone.finalproject.repositories.EventRepository;
import com.perscholas.nov2019.philly.capstone.finalproject.repositories.TicketBuyerRepository;
import com.perscholas.nov2019.philly.capstone.finalproject.repositories.TicketRepository;
import com.perscholas.nov2019.philly.capstone.finalproject.repositories.TicketSellerRepository;
import com.perscholas.nov2019.philly.capstone.finalproject.services.BuyerService;
import com.perscholas.nov2019.philly.capstone.finalproject.services.EventService;
import com.perscholas.nov2019.philly.capstone.finalproject.services.SellerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import java.util.ArrayList;
import java.util.List;

@org.springframework.stereotype.Controller    // This means that this class is a Controller
public class TicketSellerController {

    private static Integer ticketSellerId = -1;
    private boolean editSeller = false;
    private boolean uploadEvent = false;
    private boolean login = false;

    @Autowired // This means to get the bean called eventRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private EventRepository eventRepository;

    @Autowired // This means to get the bean called ticketBuyerRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TicketBuyerRepository ticketBuyerRepository;

    @Autowired // This means to get the bean called ticketSellerRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TicketSellerRepository ticketSellerRepository;

    @Autowired // This means to get the bean called ticketRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TicketRepository ticketRepository;

    private EventService eventService = new EventService();
    private BuyerService buyerService = new BuyerService();
    private SellerService sellerService = new SellerService();

    //A seller registers.

    /****************************************************************************************************************************************************************************************************************************************************************************************/

    @GetMapping(path = "/register-seller")
    public String setUpRegistrationForSeller(Model model) {
        model.addAttribute("ticketseller", new TicketSeller());
        return "register-seller";
    }

    @PostMapping(path = "/register-seller")
    public String registerSeller(@ModelAttribute("ticketseller") TicketSeller ticketSeller, Model model) {
        List<TicketSeller> lt = ticketSellerRepository.findSellers();

        try {

            if (sellerService.isThere(ticketSeller.getOrgname(), lt))
                throw new UserThereException(true);

            String hashedPwd = sellerService.hashPassword(ticketSeller.getPassword());

            try {
                ticketSellerRepository.registerSeller(ticketSeller.getOrgname(), ticketSeller.getOrgaddress(), ticketSeller.getWebaddress(), ticketSeller.getContactfirstname(), ticketSeller.getContactlastname(), ticketSeller.getContactemail(), ticketSeller.getContactphone(), hashedPwd);
            } catch (Exception e) {
                e.printStackTrace();
            }

            return "login-seller";
        }catch (UserThereException ute){
            model.addAttribute("isThere", ute.isThere());
            return "register-seller";
        }
    }

    /*@GetMapping(path = "/error/register-seller")
    public String setUpRegistrationAgainSeller(Model model) {
        model.addAttribute("ticketseller", new TicketSeller());
        return "error/register-seller";
    }

    @PostMapping(path = "/error/register-seller")
    public String registerAgainSeller(@ModelAttribute("ticketseller") TicketSeller ticketSeller) {
        List<TicketSeller> lt = ticketSellerRepository.findSellers();

        if (sellerService.isThere(ticketSeller.getOrgname(), lt))
            return "error/register-seller";

        String hashedPwd = sellerService.hashPassword(ticketSeller.getPassword());

        try {
            ticketSellerRepository.registerSeller(ticketSeller.getOrgname(), ticketSeller.getOrgaddress(), ticketSeller.getWebaddress(), ticketSeller.getContactfirstname(), ticketSeller.getContactlastname(), ticketSeller.getContactemail(), ticketSeller.getContactphone(), hashedPwd, "Seller");
        } catch (Exception e) {
            e.printStackTrace();
        }

        return "login-seller";
    }*/
    /***************************************************************************************************************************************************************************************************************************************************************************************/

    //A seller logs in.

    /*****************************************************************************************************************************************/
    @GetMapping(path = "/login-seller")
    public String setUpLoginForSeller(Model model) {
        login = true;
        model.addAttribute("ticketseller", new TicketSeller());
        return "login-seller";
    }
    /******************************************************************************************************************************************/

    //A ticket seller uploads an event.

    /********************************************************************************************************************************************************************************************************/
    @GetMapping(path = "/upload_event")
    public String uploadEvent(Model model) {

            uploadEvent = true;
            model.addAttribute("event", new Event());

            return "upload_event";
    }
    /*********************************************************************************************************************************************************************************************************************************************************************/

    //Sellers edit their accounts

    /**********************************************************************************************************************************************************************************************************/
    @GetMapping(path = "/seller-account")
    public String accountSeller(Model model, Event event) {

        TicketSeller ticketSeller = ticketSellerRepository.findSellerById(ticketSellerId);

        List<Event> events = eventRepository.findEventsBySellerId(ticketSeller.getId());

        model.addAttribute("ticketseller", ticketSeller);
        model.addAttribute("events", events);

        return "seller-account";
    }

    @GetMapping(path = "/edit-seller")
    public String editSeller(Model model) {
        editSeller = true;
        model.addAttribute("ticketseller", new TicketSeller());
        return "edit-seller";
    }

   @PostMapping(path = "/seller-account")
   public String sellerAccount (Model model, @ModelAttribute("ticketseller") TicketSeller ticketSeller, @ModelAttribute("event") Event event, @RequestParam(value = "delete", required = false) Integer eventId) {

       if (editSeller) {
           if (!sellerService.isEmpty(ticketSeller, ticketSellerId, ticketSellerRepository))
               ticketSeller.setPassword(sellerService.hashPassword(ticketSeller.getPassword()));

           ticketSellerRepository.update(ticketSeller.getOrgname(), ticketSeller.getOrgaddress(), ticketSeller.getWebaddress(), ticketSeller.getContactfirstname(), ticketSeller.getContactlastname(), ticketSeller.getContactemail(), ticketSeller.getContactphone(), ticketSeller.getPassword(), ticketSellerId);
           TicketSeller ts = ticketSellerRepository.findSellerById(ticketSellerId);
           List<Event> events = eventRepository.findEventsBySellerId(ticketSellerId);

           model.addAttribute("events", events);
           model.addAttribute("ticketseller", ts);
           editSeller = false;

           return "seller-account";
       }

       if (uploadEvent)
       {
           ticketSellerId = event.getTicketsellerid();
           eventRepository.insertEvent(event.getTicketsellerid(), event.getTitleofevent(), event.getPlaceofevent(), event.getDescription(), event.getStartdate(), event.getEnddate(), event.getLocaltimeofshow(), event.getPriceofticket(), event.getNumberoftickets());
           List<Event> events = eventRepository.findEventsBySellerId(event.getTicketsellerid());
           TicketSeller ticketSeller1 = ticketSellerRepository.findSellerById(event.getTicketsellerid());
           model.addAttribute("events", events);
           model.addAttribute("ticketseller", ticketSeller1);
           uploadEvent = false;

           return "seller-account";
       }

       if (login) {

           List<TicketSeller> lt = ticketSellerRepository.findSellers();

           if (sellerService.isThere(ticketSeller.getOrgname(), ticketSeller.getPassword(), lt)) {
               TicketSeller ticketSeller1 = ticketSellerRepository.findSellerByOrgName(ticketSeller.getOrgname());
               ticketSellerId = ticketSeller1.getId();

               List<Event> events = eventRepository.findEventsBySellerId(ticketSellerId);
               model.addAttribute("events", events);
               model.addAttribute("ticketseller", ticketSeller1);
               login = false;

               return "seller-account";
           }
           return "error/login-seller";
       }

       eventRepository.deleteEventByEventId(eventId);
       TicketSeller ticketSeller1 = ticketSellerRepository.findSellerById(ticketSellerId);
       List<Event> events = eventRepository.findEventsBySellerId(ticketSeller1.getId());
       model.addAttribute("events", events);
       model.addAttribute("ticketseller", ticketSeller1);

       return "seller-account";
   }
    /*****************************************************************************************************************************************************************************************************************************************************************************************************************/
}