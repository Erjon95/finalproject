package com.perscholas.nov2019.philly.capstone.finalproject.controllers;

import com.perscholas.nov2019.philly.capstone.finalproject.models.Event;
import com.perscholas.nov2019.philly.capstone.finalproject.models.TicketBuyer;
import com.perscholas.nov2019.philly.capstone.finalproject.models.TicketSeller;
import com.perscholas.nov2019.philly.capstone.finalproject.repositories.EventRepository;
import com.perscholas.nov2019.philly.capstone.finalproject.repositories.TicketBuyerRepository;
import com.perscholas.nov2019.philly.capstone.finalproject.repositories.TicketRepository;
import com.perscholas.nov2019.philly.capstone.finalproject.repositories.TicketSellerRepository;
import com.perscholas.nov2019.philly.capstone.finalproject.services.BuyerService;
import com.perscholas.nov2019.philly.capstone.finalproject.services.EventService;
import com.perscholas.nov2019.philly.capstone.finalproject.services.SellerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;

@org.springframework.stereotype.Controller    // This means that this class is a Controller
//@RequestMapping(path="/") // This means URL's start with / (after Application path)
public class TicketSellerController {

    private static Integer ticketSellerId = -1;
    private boolean editSeller = false;

    @Autowired // This means to get the bean called eventRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private EventRepository eventRepository;

    @Autowired // This means to get the bean called ticketBuyerRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TicketBuyerRepository ticketBuyerRepository;

    @Autowired // This means to get the bean called ticketSellerRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TicketSellerRepository ticketSellerRepository;

    @Autowired // This means to get the bean called ticketRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TicketRepository ticketRepository;

    private EventService eventService = new EventService();
    private BuyerService buyerService = new BuyerService();
    private SellerService sellerService = new SellerService();

    //A seller registers.

    /****************************************************************************************************************************************************************************************************************************************************************************************/

    @GetMapping(path = "/register-seller")
    public String setUpRegistrationForSeller(Model model) {
        model.addAttribute("ticketseller", new TicketSeller());
        return "register-seller";
    }

    @PostMapping(path = "/register-seller")
    public String registerSeller(@ModelAttribute("ticketseller") TicketSeller ticketSeller) {
        List<TicketSeller> lt = ticketSellerRepository.findSellers();

        if (sellerService.isThere(ticketSeller.getOrgname(), lt))
            return "error/register-seller";

        String hashedPwd = sellerService.hashPassword(ticketSeller.getPassword());

        try {
            ticketSellerRepository.registerSeller(ticketSeller.getOrgname(), ticketSeller.getOrgaddress(), ticketSeller.getWebaddress(), ticketSeller.getContactfirstname(), ticketSeller.getContactlastname(), ticketSeller.getContactemail(), ticketSeller.getContactphone(), hashedPwd);
        } catch (Exception e) {
            e.printStackTrace();
        }

        return "login-seller";
    }

    @GetMapping(path = "/error/register-seller")
    public String setUpRegistrationAgainSeller(Model model) {
        model.addAttribute("ticketseller", new TicketSeller());
        return "error/register-seller";
    }

    @PostMapping(path = "/error/register-seller")
    public String registerAgainSeller(@ModelAttribute("ticketseller") TicketSeller ticketSeller) {
        List<TicketSeller> lt = ticketSellerRepository.findSellers();

        if (sellerService.isThere(ticketSeller.getOrgname(), lt))
            return "error/register-seller";

        String hashedPwd = sellerService.hashPassword(ticketSeller.getPassword());

        try {
            ticketSellerRepository.registerSeller(ticketSeller.getOrgname(), ticketSeller.getOrgaddress(), ticketSeller.getWebaddress(), ticketSeller.getContactfirstname(), ticketSeller.getContactlastname(), ticketSeller.getContactemail(), ticketSeller.getContactphone(), hashedPwd);
        } catch (Exception e) {
            e.printStackTrace();
        }

        return "login-seller";
    }
    /***************************************************************************************************************************************************************************************************************************************************************************************/

    //A seller logs in.

    /*****************************************************************************************************************************************/
    @GetMapping(path = "/login-seller")
    public String setUpLoginForSeller(Model model) {
        model.addAttribute("ticketseller", new TicketSeller());
        return "login-seller";
    }

    /*@PostMapping(path = "/login-seller")
    public String loginSeller(@ModelAttribute("ticketseller") TicketSeller ticketSeller, @ModelAttribute("event") Event event, Model model) {
        List<TicketSeller> lt = ticketSellerRepository.findSellers();

        if (sellerService.isThere(ticketSeller.getOrgname(), ticketSeller.getPassword(), lt)) {
            TicketSeller ticketSeller1 = ticketSellerRepository.findSellerByOrgName(ticketSeller.getOrgname());
            ticketSellerId = ticketSeller1.getId();
            model.addAttribute("ticketseller", ticketSeller1);
            return "seller-account";
        }

        return "error/login-seller";
    }*/

    @GetMapping(path = "/error/login-seller")
    public String setUpLoginAgainSeller(Model model) {
        model.addAttribute("ticketseller", new TicketSeller());
        return "error/login-seller";
    }

    @PostMapping(path = "/error_login-seller")
    public String loginAgainSeller(@ModelAttribute("ticketseller") TicketSeller ticketSeller, @ModelAttribute("event") Event event) {
        List<TicketSeller> lt = ticketSellerRepository.findSellers();

        if (sellerService.isThere(ticketSeller.getOrgname(), ticketSeller.getPassword(), lt))
            return "seller-account";

        return "error/login-seller";
    }
    /******************************************************************************************************************************************/

    //A ticket seller uploads an event.

    /********************************************************************************************************************************************************************************************************/
    @GetMapping(path = "/upload_event")
    public String uploadEvent(Model model) {
        if (ticketSellerId != -1) {
            TicketSeller ticketSeller = ticketSellerRepository.findSellerById(ticketSellerId);
            model.addAttribute("ticketseller", ticketSeller);
            model.addAttribute("event", new Event());

            return "upload_event";
        }
        return "sellerlogout";
    }

    /*@PostMapping(path = "/upload_event")
    public String handleUpload(@ModelAttribute("event") Event event, Model model) {

        if (ticketSellerId != -1) {
            try {
                eventRepository.insertEvent(ticketSellerId, event.getTitleofevent(), event.getPlaceofevent(), event.getDescription(), event.getStartdate(), event.getEnddate(), event.getLocaltimeofshow(), event.getPriceofticket(), event.getNumberoftickets());
            } catch (Exception e) {
                e.printStackTrace();
            }
            TicketSeller ticketSeller = ticketSellerRepository.findSellerById(ticketSellerId);
            model.addAttribute("ticketseller", ticketSeller);
            return "seller-account";
        }
        return "sellerlogout";
    }*/
    /*********************************************************************************************************************************************************************************************************************************************************************/

    //Sellers edit their accounts

    /**********************************************************************************************************************************************************************************************************/
    @GetMapping(path = "/seller-account")
    public String accountSeller(Model model) {

        if (ticketSellerId != -1) {
            TicketSeller ticketSeller = ticketSellerRepository.findSellerById(ticketSellerId);

            List<Event> events = eventRepository.findEventsBySellerId(ticketSellerId);

            model.addAttribute("ticketseller", ticketSeller);
            model.addAttribute("events", events);

            return "seller-account";
        }
        return "sellerlogout";
    }

    @GetMapping(path = "/edit-seller")
    public String editSeller(Model model) {
        if (ticketSellerId != -1) {
            editSeller = true;
            model.addAttribute("ticketseller", new TicketSeller());
            return "edit-seller";
        }
        return "sellerlogout";
    }

   /* @PostMapping(path = "/seller-account")
    public String updateSeller(Model model, TicketSeller ticketSeller) {

        if (!sellerService.isEmpty(ticketSeller, ticketSellerId, ticketSellerRepository))
            ticketSeller.setPassword(sellerService.hashPassword(ticketSeller.getPassword()));

        ticketSellerRepository.update(ticketSeller.getOrgname(), ticketSeller.getOrgaddress(), ticketSeller.getWebaddress(), ticketSeller.getContactfirstname(), ticketSeller.getContactlastname(), ticketSeller.getContactemail(), ticketSeller.getContactphone(), ticketSeller.getPassword(), ticketSellerId);
        TicketSeller ts = ticketSellerRepository.findSellerById(ticketSellerId);

        model.addAttribute("ticketseller", ts);

        return "seller-account";
    }*/

   @PostMapping(path = "/seller-account")
   public String sellerAccount (Model model, @ModelAttribute("ticketseller") TicketSeller ticketSeller) {

       if (editSeller) {
           if (!sellerService.isEmpty(ticketSeller, ticketSellerId, ticketSellerRepository))
               ticketSeller.setPassword(sellerService.hashPassword(ticketSeller.getPassword()));

           ticketSellerRepository.update(ticketSeller.getOrgname(), ticketSeller.getOrgaddress(), ticketSeller.getWebaddress(), ticketSeller.getContactfirstname(), ticketSeller.getContactlastname(), ticketSeller.getContactemail(), ticketSeller.getContactphone(), ticketSeller.getPassword(), ticketSellerId);
           TicketSeller ts = ticketSellerRepository.findSellerById(ticketSellerId);
           List<Event> events = eventRepository.findEventsBySellerId(ticketSellerId);

           model.addAttribute("events", events);
           model.addAttribute("ticketseller", ts);
           editSeller = false;

           return "seller-account";
       }

       List<TicketSeller> lt = ticketSellerRepository.findSellers();

       if (sellerService.isThere(ticketSeller.getOrgname(), ticketSeller.getPassword(), lt)) {
           TicketSeller ticketSeller1 = ticketSellerRepository.findSellerByOrgName(ticketSeller.getOrgname());
           ticketSellerId = ticketSeller1.getId();

           if (ticketSellerId != -1) {
               List<Event> events = eventRepository.findEventsBySellerId(ticketSellerId);
               model.addAttribute("events", events);
               model.addAttribute("ticketseller", ticketSeller1);

               return "seller-account";
           }
           return "sellerlogout";
       }
       return "error/login-seller";
   }
    /*****************************************************************************************************************************************************************************************************************************************************************************************************************/

    // A seller logs out.

    /***********************************/
    @GetMapping(path = "/sellerlogout")
    public String logOutSeller() {
        ticketSellerId = -1;
        return "sellerlogout";
    }
    /*********************************/
}