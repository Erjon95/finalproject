package com.perscholas.nov2019.philly.capstone.finalproject;

import antlr.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@org.springframework.stereotype.Controller    // This means that this class is a Controller
@RequestMapping(path="/") // This means URL's start with / (after Application path)
public class Controller {

    private Integer ticketBuyerId, ticketSellerId, eventId;

    @Autowired // This means to get the bean called eventRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private EventRepository eventRepository;

    @GetMapping(path="/")
    public String setUpForm(Model model) {
        model.addAttribute("event", new Event());
        return "index";
    }

    @PostMapping(path="/search_result")
    public String searchEvents(Event event, Model model) {

        List<Event> events = eventRepository.findEvents(event.getTitleofevent(), event.getPlaceofevent(), event.getDescription(), event.getStartdate(), event.getEnddate(), event.getLocaltimeofshow());

        String temp = event.getTitleofevent();
        boolean isThere = false;
        for (Event eventTemp: events)
        {
            if (eventTemp.getTitleofevent().toLowerCase().contains(temp.toLowerCase() )) {

                isThere = true;
                break;
            }
        }

        if (isThere)
        {
            model.addAttribute("events", events);
            return "search_result";
        }
        else
            return "index";
    }

    /***************************************************************************************************************************/
    @GetMapping(path="/register-buyer")
    public String setUpRegistrationForBuyer(Model model) {
        model.addAttribute("ticketbuyer", new TicketBuyer());
        return "login-register";
    }

    @PostMapping(path="/register-buyer")
    public String registerBuyer(@ModelAttribute("ticketbuyer") TicketBuyer ticketBuyer) {

        try
        {
            eventRepository.registerBuyer(ticketBuyer.getFirstname(), ticketBuyer.getLastname(), ticketBuyer.getAddress(), ticketBuyer.getEmail(), ticketBuyer.getPhone(), ticketBuyer.getPassword());
        }catch (Exception e){
            e.printStackTrace();
        }

        return "login-buyer";
    }
 /***********************************************************************************************************************************/
 @GetMapping(path="/upload_event")
 public String uploadEvent(Model model) {
     model.addAttribute("event", new Event());
     return "upload_event";
 }


 @PostMapping(path="/upload_event")
    public String handleUpload(@ModelAttribute("event") Event event) {

        try
        {
            eventRepository.insertEvent(event.getTicketsellerid(), event.getTitleofevent(), event.getPlaceofevent(), event.getDescription(), event.getStartdate(), event.getEnddate(), event.getLocaltimeofshow(), event.getPriceofticket(), event.getNumberoftickets());
        }catch (Exception e){
            e.printStackTrace();
        }

        return "index";
    }
/***************************************************************************************************************************************/
@GetMapping(path="/login-buyer")
public String setUpLoginForBuyer(Model model) {
    model.addAttribute("ticketbuyer", new TicketBuyer());
    return "login-buyer";
}

    @PostMapping(path="/login-buyer")
    public String loginBuyer(@ModelAttribute("event") TicketBuyer ticketBuyer) {
        List<TicketBuyer> lt =  eventRepository



        try
        {
            eventRepository.insertEvent(event.getTicketsellerid(), event.getTitleofevent(), event.getPlaceofevent(), event.getDescription(), event.getStartdate(), event.getEnddate(), event.getLocaltimeofshow(), event.getPriceofticket(), event.getNumberoftickets());
        }catch (Exception e){
            e.printStackTrace();
        }

        return "index";
    }
/************************************************************************************************************************************/
@PostMapping(path="/buy_result")
    public String buyResult() {

        return "buy_success";
    }
}
