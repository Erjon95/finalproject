package com.perscholas.nov2019.philly.capstone.finalproject;

import antlr.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import java.util.List;

@org.springframework.stereotype.Controller    // This means that this class is a Controller
@RequestMapping(path="/") // This means URL's start with / (after Application path)
public class Controller {

    @Autowired // This means to get the bean called eventRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private EventRepository eventRepository;

    @GetMapping(path="/")
    public String setUpForm(Model model) {
        model.addAttribute("event", new Event());
        return "index";
    }

    @PostMapping(path="/search_result")
    public String searchEvents(Event event, Model model) {

        List<Event> events = eventRepository.find(event.getTitleofevent(), event.getPlaceofevent(), event.getDescription(), event.getStartdate(), event.getEnddate(), event.getLocaltimeofshow());

        String temp = event.getTitleofevent();
        boolean isThere = false;
        for (Event eventTemp: events)
        {
            if (eventTemp.getTitleofevent().toLowerCase().contains(temp.toLowerCase() )) {

                isThere = true;
                break;
            }
        }

        if (isThere)
        {
            model.addAttribute("events", events);
            return "search_result";
        }
        else
            return "index";
    }

    @GetMapping(path="/upload_event")
    public String uploadEvent(Model model) {
        model.addAttribute("event", new Event());
        return "upload_event";
    }

    @PostMapping(path="/upload_event")
    public String handleUpload(Event event, Model model) {

        try
        {
            eventRepository.insertEvent(event.getTicketsellerid(), event.getTitleofevent(), event.getPlaceofevent(), event.getDescription(), event.getStartdate(), event.getEnddate(), event.getLocaltimeofshow(), event.getPriceofticket(), event.getNumberoftickets());
        }catch (Exception e){
            e.printStackTrace();
        }

        return "index";
    }
}
