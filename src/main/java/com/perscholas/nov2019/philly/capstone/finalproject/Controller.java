package com.perscholas.nov2019.philly.capstone.finalproject;

import antlr.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.sql.SQLException;
import java.util.Iterator;
import java.util.List;

@org.springframework.stereotype.Controller    // This means that this class is a Controller
@RequestMapping(path="/") // This means URL's start with / (after Application path)
public class Controller {

    private Integer ticketBuyerId, ticketSellerId, eventId;

    @Autowired // This means to get the bean called eventRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private EventRepository eventRepository;

    @Autowired // This means to get the bean called ticketBuyerRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TicketBuyerRepository ticketBuyerRepository;

    @Autowired // This means to get the bean called ticketBuyerRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TicketSellerRepository ticketSellerRepository;

    private Service service = new Service();

    //search for events
    /*************************************************************************************************************************************************************************************************/
    @GetMapping(path="/")
    public String setUpForm(Model model) {
        model.addAttribute("event", new Event());
        return "index";
    }

    @PostMapping(path="/search_result")
    public String searchEvents(Event event, Model model) {

        List<Event> events = eventRepository.findEvents(event.getTitleofevent(), event.getPlaceofevent(), event.getDescription(), event.getStartdate(), event.getEnddate(), event.getLocaltimeofshow());

        if (service.isEventThere(event.getTitleofevent(), events))
        {
            model.addAttribute("events", events);
            return "search_result";
        }
        else
            return "index";
    }
    /******************************************************************************************************************************************************************************************************/

    //register a buyer
    /****************************************************************************************************************************************************************************************/

    @GetMapping(path="/register-buyer")
    public String setUpRegistrationForBuyer(Model model) {
        model.addAttribute("ticketbuyer", new TicketBuyer());
        return "register-buyer";
    }

    @PostMapping(path="/register-buyer")
    public String registerBuyer(@ModelAttribute("ticketbuyer") TicketBuyer ticketBuyer) {
        String hashedPwd = service.hashPassword(ticketBuyer.getPassword());

        try
        {
            ticketBuyerRepository.registerBuyer(ticketBuyer.getFirstname(), ticketBuyer.getLastname(), ticketBuyer.getAddress(), ticketBuyer.getEmail(), ticketBuyer.getPhone(), hashedPwd);
        }catch (Exception e){
            e.printStackTrace();
        }

        return "login-buyer";
    }
    /*******************************************************************************************************************************************************************************************/

    // A ticket buyer logs in.
    /***********************************************************************************************************************/
    @GetMapping(path="/login-buyer")
    public String setUpLoginForBuyer(Model model) {
        model.addAttribute("ticketbuyer", new TicketBuyer());
        return "login-buyer";
    }

    @PostMapping(path="/login-buyer")
    public String loginBuyer(@ModelAttribute("ticketbuyer") TicketBuyer ticketBuyer, @ModelAttribute("event") Event event) {
        List<TicketBuyer> lt = ticketBuyerRepository.findBuyers();

        if (service.isBuyerThere(ticketBuyer.getEmail(), ticketBuyer.getPassword(), lt))
            return "index";

        return "buy_success";
    }
    /***************************************************************************************************************************/

    /****************************************************************************************************************************************************************************************************************************************************************************************/
    @GetMapping(path="/register-seller")
    public String setUpRegistrationForSeller(Model model) {
        model.addAttribute("ticketseller", new TicketSeller());
        return "register-seller";
    }

    @PostMapping(path="/register-seller")
    public String registerSeller(@ModelAttribute("ticketseller") TicketSeller ticketSeller) {
        String hashedPwd = service.hashPassword(ticketSeller.getPassword());

        try
        {
            ticketSellerRepository.registerSeller(ticketSeller.getOrgname(), ticketSeller.getOrgaddress(), ticketSeller.getWebaddress(), ticketSeller.getContactfirstname(), ticketSeller.getContactlastname(), ticketSeller.getContactemail(), ticketSeller.getContactphone(), hashedPwd);
        }catch (Exception e){
            e.printStackTrace();
        }

        return "login-seller";
    }
    /***************************************************************************************************************************************************************************************************************************************************************************************/

    //A ticket seller uploads an event.
    /********************************************************************************************************************************************************************************************************/
    @GetMapping(path="/upload_event")
    public String uploadEvent(Model model) {
        model.addAttribute("event", new Event());
        return "upload_event";
    }

    @PostMapping(path="/upload_event")
    public String handleUpload(@ModelAttribute("event") Event event) {

        try
        {
            eventRepository.insertEvent(event.getTicketsellerid(), event.getTitleofevent(), event.getPlaceofevent(), event.getDescription(), event.getStartdate(), event.getEnddate(), event.getLocaltimeofshow(), event.getPriceofticket(), event.getNumberoftickets());
        }catch (Exception e){
            e.printStackTrace();
        }

        return "index";
    }
    /*********************************************************************************************************************************************************************************************************************************************************************/

    @PostMapping(path="/buy_result")
    public String buyResult() {
        return "buy_success";
    }
}
