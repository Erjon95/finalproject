package com.perscholas.nov2019.philly.capstone.finalproject.controllers;

import com.perscholas.nov2019.philly.capstone.finalproject.models.Event;
import com.perscholas.nov2019.philly.capstone.finalproject.models.TicketBuyer;
import com.perscholas.nov2019.philly.capstone.finalproject.repositories.EventRepository;
import com.perscholas.nov2019.philly.capstone.finalproject.repositories.TicketBuyerRepository;
import com.perscholas.nov2019.philly.capstone.finalproject.repositories.TicketRepository;
import com.perscholas.nov2019.philly.capstone.finalproject.services.BuyerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.ArrayList;
import java.util.List;

@Controller
public class TicketBuyerController {

    static Integer ticketBuyerId;
    private boolean editBuyer;

    public TicketBuyerController()
    {
        ticketBuyerId = -1;
        editBuyer = false;
    }

    @Autowired // This means to get the bean called ticketBuyerRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TicketBuyerRepository ticketBuyerRepository;

    @Autowired // This means to get the bean called ticketRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TicketRepository ticketRepository;

    @Autowired // This means to get the bean called eventRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private EventRepository eventRepository;

    private BuyerService buyerService = new BuyerService();

    //register a buyer

    /****************************************************************************************************************************************************************************************/

    @GetMapping(path = "/register-buyer")
    public String setUpRegistrationForBuyer(Model model) {
        model.addAttribute("ticketbuyer", new TicketBuyer());
        return "register-buyer";
    }

    @PostMapping(path = "/register-buyer")
    public String registerBuyer(@ModelAttribute("ticketbuyer") TicketBuyer ticketBuyer) {

        List<TicketBuyer> lt = ticketBuyerRepository.findBuyers();

        if (buyerService.isThere(ticketBuyer.getEmail(), lt))
            return "error/register-buyer";

        String hashedPwd = buyerService.hashPassword(ticketBuyer.getPassword());

        try {
            ticketBuyerRepository.registerBuyer(ticketBuyer.getFirstname(), ticketBuyer.getLastname(), ticketBuyer.getAddress(), ticketBuyer.getEmail(), ticketBuyer.getPhone(), hashedPwd);
        } catch (Exception e) {
            e.printStackTrace();
        }

        return "login-buyer";
    }

    @GetMapping(path = "/error/register-buyer")
    public String setupRegisterAgainBuyer(Model model) {
        model.addAttribute("ticketbuyer", new TicketBuyer());
        return "error/register-buyer";
    }

    @PostMapping(path = "/error/register-buyer")
    public String registerAgainBuyer(@ModelAttribute("ticketbuyer") TicketBuyer ticketBuyer) {

        List<TicketBuyer> lt = ticketBuyerRepository.findBuyers();

        if (buyerService.isThere(ticketBuyer.getEmail(), lt))
            return "error/register-buyer";

        String hashedPwd = buyerService.hashPassword(ticketBuyer.getPassword());

        try {
            ticketBuyerRepository.registerBuyer(ticketBuyer.getFirstname(), ticketBuyer.getLastname(), ticketBuyer.getAddress(), ticketBuyer.getEmail(), ticketBuyer.getPhone(), hashedPwd);
        } catch (Exception e) {
            e.printStackTrace();
        }

        return "login-buyer";
    }
    /*******************************************************************************************************************************************************************************************/

    // A ticket buyer logs in.

    /***********************************************************************************************************************/
    @GetMapping(path = "/login-buyer")
    public String setUpLoginForBuyer(Model model) {
        model.addAttribute("ticketbuyer", new TicketBuyer());
        return "login-buyer";
    }

    @PostMapping(path = "/login-buyer")
    public String loginBuyer(@ModelAttribute("ticketbuyer") TicketBuyer ticketBuyer, @ModelAttribute("event") Event event) {
        List<TicketBuyer> lt = ticketBuyerRepository.findBuyers();

        if (buyerService.isThere(ticketBuyer.getEmail(), ticketBuyer.getPassword(), lt)) {
            ticketBuyerId = ticketBuyerRepository.findBuyerId(ticketBuyer.getEmail());

            return "index-loggedin";
        }

        return "error/login-buyer";
    }

    @GetMapping(path = "/error/login-buyer")
    public String setUpLoginAgainBuyer(Model model) {
        model.addAttribute("ticketbuyer", new TicketBuyer());
        return "login-buyer";
    }

    @PostMapping(path = "/error/login-buyer")
    public String loginAgainBuyer(@ModelAttribute("ticketbuyer") TicketBuyer ticketBuyer, @ModelAttribute("event") Event event) {
        List<TicketBuyer> lt = ticketBuyerRepository.findBuyers();

        if (buyerService.isThere(ticketBuyer.getEmail(), ticketBuyer.getPassword(), lt)) {
            ticketBuyerId = ticketBuyer.getId();
            return "index-loggedin";
        }

        return "error/login-buyer";
    }
    /***************************************************************************************************************************/

    //A ticket buyer buys a ticket

    /*****************************************************************************************************************************************************************/
    @PostMapping(path = "/buy_result")
    public String buyResult(@RequestParam("eventid") Integer eventId, @ModelAttribute("ticketbuyer") TicketBuyer ticketBuyer, @ModelAttribute("event") Event event) {

        if (ticketBuyerId == -1)
            return "login-buyer";

        Integer ticketSellerId = eventRepository.findSellerId(eventId);
        List<Integer> li = ticketRepository.findTicketIdByEventIdAndBuyerId(eventId, ticketBuyerId);

        if ((ticketBuyerId != -1) && (li.isEmpty())) {
            ticketRepository.insertTicket(ticketBuyerId, ticketSellerId, eventId);
        }

        return "index-success";
    }
    /******************************************************************************************************************************************************************/

    // A buyer logs out.

    /***********************************/
    @GetMapping(path = "/buyerlogout")
    public String logOutBuyer() {
        ticketBuyerId = -1;
        return "buyerlogout";
    }
    /*********************************/

    //Buyers visit their "account" page

    /******************************************************************************************************/
    @GetMapping(path = "/buyer-account")
    public String accountBuyer(Model model) {
        TicketBuyer ticketBuyer = ticketBuyerRepository.findBuyerById(ticketBuyerId);

        List<Integer> eventId = ticketRepository.findEventsByBuyerId(ticketBuyerId);
        List<Event> events = new ArrayList<>();

        for (Integer eid : eventId)
            events.add(eventRepository.findEventById(eid));

        model.addAttribute("ticketbuyer", ticketBuyer);
        model.addAttribute("events", events);


        return "buyer-account";
    }
    /******************************************************************************************************/

    //Buyers edit their accounts

    /**********************************************************************************************************************************************************************************************************/
    @GetMapping(path = "/edit-buyer")
    public String editBuyer(Model model) {
        editBuyer = true;
        model.addAttribute("ticketbuyer", new TicketBuyer());
        return "edit-buyer";
    }

    @PostMapping(path = "/buyer-account")
    public String accountBuyer(Model model, TicketBuyer ticketBuyer, @RequestParam(value = "deleteTicket", required = false) Integer eventId) {

        if (editBuyer) {

            if (!buyerService.isEmpty(ticketBuyer, ticketBuyerId, ticketBuyerRepository))
                ticketBuyer.setPassword(buyerService.hashPassword(ticketBuyer.getPassword()));

            ticketBuyerRepository.update(ticketBuyer.getFirstname(), ticketBuyer.getLastname(), ticketBuyer.getAddress(), ticketBuyer.getEmail(), ticketBuyer.getPhone(), ticketBuyer.getPassword(), ticketBuyerId);
            TicketBuyer tb = ticketBuyerRepository.findBuyerById(ticketBuyerId);

            List<Integer> eventid = ticketRepository.findEventsByBuyerId(ticketBuyerId);
            List<Event> events = new ArrayList<>();

            for (Integer eid : eventid)
                events.add(eventRepository.findEventById(eid));

            model.addAttribute("ticketbuyer", tb);
            model.addAttribute("events", events);
            editBuyer = false;

            return "buyer-account";
        }

        ticketRepository.deleteTicketByEventId(eventId);
        TicketBuyer ticketBuyer1 = ticketBuyerRepository.findBuyerById(ticketBuyerId);
        List<Integer> eventid = ticketRepository.findEventsByBuyerId(ticketBuyerId);
        List<Event> events = new ArrayList<>();

        for (Integer eid : eventid)
            events.add(eventRepository.findEventById(eid));

        model.addAttribute("ticketbuyer", ticketBuyer1);
        model.addAttribute("events", events);

        return "buyer-account";
    }
    /*************************************************************************************************************************************************************************************************************/

}
