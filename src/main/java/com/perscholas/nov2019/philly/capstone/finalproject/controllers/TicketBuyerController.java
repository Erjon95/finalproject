package com.perscholas.nov2019.philly.capstone.finalproject.controllers;

import com.perscholas.nov2019.philly.capstone.finalproject.exceptions.TicketThereException;
import com.perscholas.nov2019.philly.capstone.finalproject.exceptions.UserThereException;
import com.perscholas.nov2019.philly.capstone.finalproject.models.Event;
import com.perscholas.nov2019.philly.capstone.finalproject.models.PrintableTicket;
import com.perscholas.nov2019.philly.capstone.finalproject.models.TicketBuyer;
import com.perscholas.nov2019.philly.capstone.finalproject.models.TicketSeller;
import com.perscholas.nov2019.philly.capstone.finalproject.repositories.EventRepository;
import com.perscholas.nov2019.philly.capstone.finalproject.repositories.TicketBuyerRepository;
import com.perscholas.nov2019.philly.capstone.finalproject.repositories.TicketRepository;
import com.perscholas.nov2019.philly.capstone.finalproject.repositories.TicketSellerRepository;
import com.perscholas.nov2019.philly.capstone.finalproject.services.BuyerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import javax.servlet.http.HttpServletRequest;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.stream.Collectors;

@Controller
public class TicketBuyerController {

    static Integer ticketBuyerId = -1;
    private boolean editBuyer = false;
    private boolean isTicketNew = false;
    private boolean isTicketBought = false;

    @Autowired // This means to get the bean called ticketBuyerRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TicketBuyerRepository ticketBuyerRepository;

    @Autowired // This means to get the bean called ticketRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TicketRepository ticketRepository;

    @Autowired // This means to get the bean called eventRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private EventRepository eventRepository;

    @Autowired // This means to get the bean called ticketSellerRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TicketSellerRepository ticketSellerRepository;

    private BuyerService buyerService = new BuyerService();

    //register a buyer

    /****************************************************************************************************************************************************************************************/

    @GetMapping(path = "/register-buyer")
    public String setUpRegistrationForBuyer(Model model) {
        model.addAttribute("ticketbuyer", new TicketBuyer());
        return "register-buyer";
    }

    /*@PostMapping(path = "/register-buyer")
    public String registerBuyer(@ModelAttribute("ticketbuyer") TicketBuyer ticketBuyer, Model model) {

        try {

            List<TicketBuyer> lt = ticketBuyerRepository.findBuyers();

            if (buyerService.isThere(ticketBuyer.getEmail(), lt)) {
                throw new UserThereException(true);
            }

            String hashedPwd = buyerService.hashPassword(ticketBuyer.getPassword());

            try {
                ticketBuyerRepository.registerBuyer(ticketBuyer.getFirstname(), ticketBuyer.getLastname(), ticketBuyer.getAddress(), ticketBuyer.getEmail(), ticketBuyer.getPhone(), hashedPwd, "BUYER");
            } catch (Exception e) {
                e.printStackTrace();
            }

            return "login-buyer";

        }catch (UserThereException ute)
        {
            model.addAttribute("isThere", ute.isThere());
            return "register-buyer";
        }
    }*/
    /*******************************************************************************************************************************************************************************************/

    // A ticket buyer logs in.

    /***********************************************************************************************************************/
    @GetMapping(path = "/login-buyer")
    public String setUpLoginForBuyer(Model model) {
        model.addAttribute("ticketbuyer", new TicketBuyer());
        return "login-buyer";
    }
    /***************************************************************************************************************************/

    //A ticket buyer buys a ticket

    /*****************************************************************************************************************************************************************/
    /*@PostMapping(path = "/buy_result")
    public String buyResult(@RequestParam("eventid") Integer eventId, Model model) {

        Integer ticketSellerId = eventRepository.findSellerId(eventId);
        List<Integer> li = ticketRepository.findTicketIdByEventIdAndBuyerId(eventId, ticketBuyerId);

        try {

            if (li.isEmpty()) {
                ticketRepository.insertTicket(ticketBuyerId, ticketSellerId, eventId);
                isTicketNew = true;
            } else
                throw new TicketThereException();
            //isTicketBought = true;
        }catch (TicketThereException tte){
            isTicketBought = true;
        }

        model.addAttribute("event", new Event());
        model.addAttribute("isTicketNew", isTicketNew);
        model.addAttribute("isTicketBought", isTicketBought);
        isTicketNew = false;
        isTicketBought = false;

        return "index";
    }*/
    /******************************************************************************************************************************************************************/

    //Buyers visit their "account" page

    /******************************************************************************************************/
    @GetMapping(path = "/buyer-account")
    public String accountBuyer(Model model, HttpServletRequest httpServletRequest) {

        ticketBuyerId = ticketBuyerRepository.findBuyerId(httpServletRequest.getRemoteUser());

        TicketBuyer ticketBuyer = ticketBuyerRepository.findBuyerById(ticketBuyerId);

        List<Integer> eventId = ticketRepository.findEventsByBuyerId(ticketBuyerId);
        List<PrintableTicket> printableTickets = new ArrayList<>();

        for (Integer eid : eventId) {
            PrintableTicket printableTicket = new PrintableTicket();
            Event event = eventRepository.findEventById(eid);
            printableTicket.setId(event.getId());
            printableTicket.setDescription(event.getDescription());
            printableTicket.setEnddate(event.getEnddate());
            printableTicket.setLocaltimeofshow(event.getLocaltimeofshow());
            printableTicket.setNumberoftickets(event.getNumberoftickets());
            printableTicket.setPlaceofevent(event.getPlaceofevent());
            printableTicket.setPriceofticket(event.getPriceofticket());
            printableTicket.setStartdate(event.getStartdate());
            printableTicket.setTitleofevent(event.getTitleofevent());
            printableTicket.setOrganizer(ticketSellerRepository.findOrgNameById(event.getTicketsellerid()));
            printableTickets.add(printableTicket);
        }

        model.addAttribute("ticketbuyer", ticketBuyer);
        model.addAttribute("printabletickets", printableTickets);
        editBuyer = false;

        return "buyer-account";
    }
    /******************************************************************************************************/

    //Buyers edit their accounts

    /**********************************************************************************************************************************************************************************************************/
    @GetMapping(path = "/edit-buyer")
    public String editBuyer(Model model, HttpServletRequest httpServletRequest) {
        ticketBuyerId = ticketBuyerRepository.findBuyerId(httpServletRequest.getRemoteUser());
        TicketBuyer ticketBuyer = ticketBuyerRepository.findBuyerById(ticketBuyerId);
        editBuyer = true;
        model.addAttribute("ticketbuyer", new TicketBuyer());
        model.addAttribute("firstname", ticketBuyer.getFirstname());
        model.addAttribute("lastname", ticketBuyer.getLastname());
        model.addAttribute("address", ticketBuyer.getAddress());
        model.addAttribute("email", ticketBuyer.getEmail());
        model.addAttribute("phone", ticketBuyer.getPhone());
        return "edit-buyer";
    }

    @PostMapping(path = "/buyer-account")
    public String accountBuyer(Model model, TicketBuyer ticketBuyer, @RequestParam(value = "deleteTicket", required = false) Integer eventId) {

        if (editBuyer) {

            if (!buyerService.isEmpty(ticketBuyer, ticketBuyerId, ticketBuyerRepository))
                ticketBuyer.setPassword(buyerService.hashPassword(ticketBuyer.getPassword()));

            ticketBuyerRepository.update(ticketBuyer.getFirstname(), ticketBuyer.getLastname(), ticketBuyer.getAddress(), ticketBuyer.getEmail(), ticketBuyer.getPhone(), ticketBuyer.getPassword(), ticketBuyerId);
            TicketBuyer tb = ticketBuyerRepository.findBuyerById(ticketBuyerId);

            List<Integer> eventid = ticketRepository.findEventsByBuyerId(ticketBuyerId);
            List<PrintableTicket> printableTickets = new ArrayList<>();

            eventid.forEach(eid -> {
                PrintableTicket printableTicket = new PrintableTicket();
                Event event = eventRepository.findEventById(eid);
                printableTicket.setId(event.getId());
                printableTicket.setDescription(event.getDescription());
                printableTicket.setEnddate(event.getEnddate());
                printableTicket.setLocaltimeofshow(event.getLocaltimeofshow());
                printableTicket.setNumberoftickets(event.getNumberoftickets());
                printableTicket.setPlaceofevent(event.getPlaceofevent());
                printableTicket.setPriceofticket(event.getPriceofticket());
                printableTicket.setStartdate(event.getStartdate());
                printableTicket.setTitleofevent(event.getTitleofevent());
                printableTicket.setOrganizer(ticketSellerRepository.findOrgNameById(event.getTicketsellerid()));
                printableTickets.add(printableTicket);
            });

            model.addAttribute("ticketbuyer", tb);
            model.addAttribute("printabletickets", printableTickets);
            editBuyer = false;

            return "buyer-account";
        }

        ticketRepository.deleteTicketByEventId(eventId);
        TicketBuyer ticketBuyer1 = ticketBuyerRepository.findBuyerById(ticketBuyerId);
        List<Integer> eventid = ticketRepository.findEventsByBuyerId(ticketBuyerId);
        List<PrintableTicket> printableTickets = new ArrayList<>();

        eventid.forEach(eid -> {
            PrintableTicket printableTicket = new PrintableTicket();
            Event event = eventRepository.findEventById(eid);
            printableTicket.setId(event.getId());
            printableTicket.setDescription(event.getDescription());
            printableTicket.setEnddate(event.getEnddate());
            printableTicket.setLocaltimeofshow(event.getLocaltimeofshow());
            printableTicket.setNumberoftickets(event.getNumberoftickets());
            printableTicket.setPlaceofevent(event.getPlaceofevent());
            printableTicket.setPriceofticket(event.getPriceofticket());
            printableTicket.setStartdate(event.getStartdate());
            printableTicket.setTitleofevent(event.getTitleofevent());
            printableTicket.setOrganizer(ticketSellerRepository.findOrgNameById(event.getTicketsellerid()));
            printableTickets.add(printableTicket);
        });

        model.addAttribute("ticketbuyer", ticketBuyer1);
        model.addAttribute("printabletickets", printableTickets);

        return "buyer-account";
    }
    /*************************************************************************************************************************************************************************************************************/

}
